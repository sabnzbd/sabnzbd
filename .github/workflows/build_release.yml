name: Build binaries and source distribution

on: [push, pull_request]

# Setting PYTHONNODEBUGRANGES reduces binary size
env:
  PYTHONNODEBUGRANGES: 1

jobs:
  build_windows:
    name: Build Windows binary
    runs-on: windows-2022
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python 3.13
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        architecture: "x64"
        cache: pip
        cache-dependency-path: "**/requirements.txt"
    - name: Install Python dependencies
      # Without dependencies to make sure everything is covered in the requirements.txt
      run: |
        python --version
        python -m pip install --upgrade pip wheel
        pip install --upgrade -r requirements.txt --no-dependencies
        pip install --upgrade -r builder/requirements.txt --no-dependencies
    - name: Build Windows standalone binary and installer
      run: python builder/package.py installer
    - name: Upload Windows standalone binary
      uses: actions/upload-artifact@v4
      with:
        path: "*-win64-bin.zip"
        name: Windows standalone binary
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        path: "*-win-setup.exe"
        name: Windows installer

  build_macos:
    name: Build macOS binary
    runs-on: macos-14
    timeout-minutes: 30
    env:
      # We need the official Python, because the GA ones only support newer macOS versions
      # The deployment target is picked up by the Python build tools automatically
      # If updated, make sure to also set LSMinimumSystemVersion in SABnzbd.spec
      PYTHON_VERSION: "3.13.5"
      MACOSX_DEPLOYMENT_TARGET: "10.13"
      # We need to force compile for universal2 support
      CFLAGS: -arch x86_64 -arch arm64
      ARCHFLAGS: -arch x86_64 -arch arm64
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python 3.13
      # Only use this for the caching of pip packages!
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        cache: pip
        cache-dependency-path: "**/requirements.txt"
    - name: Cache Python download
      id: cache-python-download
      uses: actions/cache@v4
      with:
        path: ~/python.pkg
        key: cache-macOS-Python-${{ env.PYTHON_VERSION }}
    - name: Get Python from python.org
      if: steps.cache-python-download.outputs.cache-hit != 'true'
      run: curl https://www.python.org/ftp/python/${PYTHON_VERSION}/python-${PYTHON_VERSION}-macos11.pkg -o ~/python.pkg
    - name: Install Python
      run: sudo installer -pkg ~/python.pkg -target /
    - name: Install Python dependencies
      # We have to manually compile some modules as they don't automatically fetch universal2 binaries
      run: |
        python3 --version
        pip3 install --upgrade pip wheel
        pip3 install --upgrade -r requirements.txt --no-binary cffi,CT3,PyYAML,charset_normalizer --no-dependencies
        pip3 install --upgrade -r builder/requirements.txt --no-dependencies
    - name: Import macOS codesign certificates
      # Taken from https://github.com/Apple-Actions/import-codesign-certs/pull/27 (comments)
      env:
        CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
        CERTIFICATES_P12_PASSWORD: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
        MACOS_KEYCHAIN_TEMP_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_TEMP_PASSWORD }}
      if: env.CERTIFICATES_P12
      run: |
        echo $CERTIFICATES_P12 | base64 --decode > certificate.p12
        security create-keychain -p "$MACOS_KEYCHAIN_TEMP_PASSWORD" build.keychain 
        security default-keychain -s build.keychain 
        security unlock-keychain -p "$MACOS_KEYCHAIN_TEMP_PASSWORD" build.keychain
        security set-keychain-settings -lut 21600 build.keychain
        security import certificate.p12 -k build.keychain -P "$CERTIFICATES_P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign -T /usr/bin/xcrun
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_KEYCHAIN_TEMP_PASSWORD" build.keychain
    - name: Build source distribution
      # Run this on macOS so the line endings are correct by default
      run: python builder/package.py source
    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        path: "*-src.tar.gz"
        name: Source distribution
    - name: Build macOS binary
      env:
        SIGNING_AUTH: ${{ secrets.SIGNING_AUTH }}
        NOTARIZATION_USER: ${{ secrets.NOTARIZATION_USER }}
        NOTARIZATION_PASS: ${{ secrets.NOTARIZATION_PASS }}
      run: |
        python3 builder/package.py app
        python3 builder/make_dmg.py
    - name: Upload macOS binary
      uses: actions/upload-artifact@v4
      with:
        path: "*-macos.dmg"
        name: macOS binary

  build-snap:
    name: Build Snap Packages (${{ matrix.linux_arch }})
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            linux_arch: amd64
          - os: ubuntu-24.04-arm
            linux_arch: arm64

    steps:
      - uses: actions/checkout@v5
      - name: Cache par2cmdline-turbo tarball
        uses: actions/cache@v4
        id: cache-par2cmdline
        # Clearing the cache in case of new version requires manual clearing in GitHub!
        with:
          path: snap/par2cmdline.tar.gz
          key: cache-par2cmdline
      - name: Download par2cmdline-turbo tarball
        if: steps.cache-par2cmdline.outputs.cache-hit != 'true'
        run: |
          PAR2_TARBALL=$(curl -sL https://api.github.com/repos/animetosho/par2cmdline-turbo/releases/latest | jq -r '.tarball_url')
          curl -o snap/par2cmdline.tar.gz -L "$PAR2_TARBALL"
      - uses: snapcore/action-build@v1
        name: Build snap
        id: snapcraft
      - name: Test snap installation
        run: |
          sudo snap install --dangerous *.snap
          sudo snap connect sabnzbd:removable-media
          # Basic smoke test - check that the binary exists and can show help
          timeout 10s snap run sabnzbd --help || true
          sudo snap remove sabnzbd
      - name: Upload snap
        uses: actions/upload-artifact@v4
        with:
          name: Snap package (${{ matrix.linux_arch }})
          path: ${{ steps.snapcraft.outputs.snap }}
      - name: Publish snap
        uses: snapcore/action-publish@v1
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_TOKEN }}
        with:
          store_login: ${{ secrets.SNAP_TOKEN }}
          snap: ${{ steps.snapcraft.outputs.snap }}
          release: stable

  release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [build_windows, build_macos]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.x"
          cache: pip
          cache-dependency-path: "builder/release-requirements.txt"
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist
      - name: Move all artifacts to main folder
        run: find dist -type f -exec mv {} . \;
      - name: Prepare official release
        env:
          AUTOMATION_GITHUB_TOKEN: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
          REDDIT_TOKEN: ${{ secrets.REDDIT_TOKEN }}
        run: |
          pip3 install -r builder/release-requirements.txt
          python3 builder/release.py
